{"version":3,"file":"ng2-dnd.umd.min.js","sources":["~/ng2-dnd/src/dnd.utils.ts","~/ng2-dnd/src/dnd.service.ts","~/ng2-dnd/src/dnd.config.ts","~/ng2-dnd/src/abstract.component.ts","~/ng2-dnd/src/draggable.component.ts","~/ng2-dnd/src/droppable.component.ts","~/ng2-dnd/src/sortable.component.ts","~/ng2-dnd/src/dnd.module.ts"],"sourcesContent":["// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\n/**\n * Check and return true if an object is type of string\n */\nexport function isString(obj:any) {\n    return typeof obj === \"string\";\n}\n\n/**\n * Check and return true if an object not undefined or null\n */\nexport function isPresent(obj: any) {\n    return obj !== undefined && obj !== null;\n}\n\n/**\n * Check and return true if an object is type of Function\n */\nexport function isFunction(obj: any) {\n    return typeof obj === \"function\";\n}\n\n/**\n * Create Image element with specified url string\n */\nexport function createImage(src: string) {\n    let img:HTMLImageElement = new HTMLImageElement();\n    img.src = src;\n    return img;\n}\n\n/**\n * Call the function\n */\nexport function callFun(fun: Function) {\n    return fun();\n}","// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {Injectable, EventEmitter} from '@angular/core';\n\nimport {DragDropConfig} from './dnd.config';\nimport {isPresent} from './dnd.utils';\nimport {SortableContainer} from './sortable.component';\n\nexport class DragDropData {\n    dragData: any;\n    mouseEvent: MouseEvent;\n}\n\nexport function dragDropServiceFactory(): DragDropService  {\n    return new DragDropService();\n}\n\n@Injectable()\nexport class DragDropService {\n    allowedDropZones: Array<string> = [];\n    onDragSuccessCallback: EventEmitter<DragDropData>;\n    dragData: any;\n    isDragged: boolean;\n}\n\nexport function dragDropSortableServiceFactory(config: DragDropConfig): DragDropSortableService  {\n    return new DragDropSortableService(config);\n}\n\n@Injectable()\nexport class DragDropSortableService {\n    index: number;\n    sortableContainer: SortableContainer;\n    isDragged: boolean;\n\n    private _elem: HTMLElement;\n    public get elem(): HTMLElement {\n        return this._elem;\n    }\n\n    constructor(private _config:DragDropConfig) {}\n\n    markSortable(elem: HTMLElement) {\n        if (isPresent(this._elem)) {\n            this._elem.classList.remove(this._config.onSortableDragClass);\n        }\n        if (isPresent(elem)) {\n            this._elem = elem;\n            this._elem.classList.add(this._config.onSortableDragClass);\n        }\n    }\n}\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {isString} from './dnd.utils';\n\nexport class DataTransferEffect {\n\n    static COPY = new DataTransferEffect('copy');\n    static LINK = new DataTransferEffect('link');\n    static MOVE = new DataTransferEffect('move');\n    static NONE = new DataTransferEffect('none');\n\n    constructor(public name: string) { }\n}\n\nexport class DragImage {\n    constructor(\n        public imageElement: any,\n        public x_offset: number = 0,\n        public y_offset: number = 0) {\n            if (isString(this.imageElement)) {\n                // Create real image from string source\n                let imgScr: string = <string>this.imageElement;\n                this.imageElement = new HTMLImageElement();\n                (<HTMLImageElement>this.imageElement).src = imgScr;\n            }\n        }\n}\n\nexport class DragDropConfig {\n    public onDragStartClass: string = \"dnd-drag-start\";\n    public onDragEnterClass: string = \"dnd-drag-enter\";\n    public onDragOverClass: string = \"dnd-drag-over\";\n    public onSortableDragClass: string = \"dnd-sortable-drag\";\n\n    public dragEffect: DataTransferEffect = DataTransferEffect.MOVE;\n    public dropEffect: DataTransferEffect = DataTransferEffect.MOVE;\n    public dragCursor: string = \"move\";\n    public dragImage: DragImage;\n    public defaultCursor: string = \"pointer\";\n}","// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {Injectable, ChangeDetectorRef, ViewRef} from '@angular/core';\nimport {ElementRef} from '@angular/core';\n\nimport { DragDropConfig, DragImage } from './dnd.config';\nimport { DragDropService } from './dnd.service';\nimport { isString, isFunction, isPresent, createImage, callFun } from './dnd.utils';\n\n@Injectable()\nexport abstract class AbstractComponent {\n    _elem: HTMLElement;\n    _dragHandle: HTMLElement;\n    _dragHelper: HTMLElement;\n    _defaultCursor: string;\n\n    /**\n     * Last element that was mousedown'ed\n     */\n    _target: EventTarget;\n\n    /**\n     * Whether the object is draggable. Default is true.\n     */\n    private _dragEnabled: boolean = false;\n    set dragEnabled(enabled: boolean) {\n        this._dragEnabled = !!enabled;\n        let cursorelem = this._elem;\n        if(this._dragHandle) {\n            cursorelem = this._dragHandle;\n            this._elem.draggable = undefined;\n        }\n        cursorelem.draggable = this._dragEnabled;\n    }\n    get dragEnabled(): boolean {\n        return this._dragEnabled;\n    }\n\n    /**\n     * Allows drop on this element\n     */\n    dropEnabled: boolean = false;\n    /**\n     * Drag effect\n     */\n    effectAllowed: string;\n    /**\n     * Drag cursor\n     */\n    effectCursor: string;\n\n    /**\n     * Restrict places where a draggable element can be dropped. Either one of\n     * these two mechanisms can be used:\n     *\n     * - dropZones: an array of strings that permits to specify the drop zones\n     *   associated with this component. By default, if the drop-zones attribute\n     *   is not specified, the droppable component accepts drop operations by\n     *   all the draggable components that do not specify the allowed-drop-zones\n     *\n     * - allowDrop: a boolean function for droppable components, that is checked\n     *   when an item is dragged. The function is passed the dragData of this\n     *   item.\n     *   - if it returns true, the item can be dropped in this component\n     *   - if it returns false, the item cannot be dropped here\n     */\n    allowDrop: (dropData: any) => boolean;\n    dropZones: string[] = [];\n\n    /**\n     * Here is the property dragImage you can use:\n     * - The string value as url to the image\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"/images/simpler.png\">\n     * ...\n     * - The DragImage value with Image and optional offset by x and y:\n     *   let myDragImage: DragImage = new DragImage(\"/images/simpler1.png\", 0, 0);\n     * ...\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"myDragImage\">\n     * ...\n     * - The custom function to return the value of dragImage programmatically:\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"getDragImage(someData)\">\n     * ...\n     *   getDragImage(value:any): string {\n     *     return value ? \"/images/simpler1.png\" : \"/images/simpler2.png\"\n     *   }\n     */\n    dragImage: string | DragImage | Function;\n\n    cloneItem: boolean = false;\n\n    constructor(elemRef: ElementRef, public _dragDropService: DragDropService, public _config: DragDropConfig,\n        private _cdr: ChangeDetectorRef) {\n\n        // Assign default cursor unless overridden\n        this._defaultCursor = _config.defaultCursor;\n        this._elem = elemRef.nativeElement;\n        this._elem.style.cursor = this._defaultCursor;  // set default cursor on our element\n        //\n        // DROP events\n        //\n        this._elem.ondragenter = (event: Event) => {\n            this._onDragEnter(event);\n        };\n        this._elem.ondragover = (event: DragEvent) => {\n            this._onDragOver(event);\n            //\n            if (event.dataTransfer != null) {\n                event.dataTransfer.dropEffect = this._config.dropEffect.name;\n            }\n\n            return false;\n        };\n        this._elem.ondragleave = (event: Event) => {\n            this._onDragLeave(event);\n        };\n        this._elem.ondrop = (event: Event) => {\n            this._onDrop(event);\n        };\n        this.bindDragging(this._elem);\n\n    }\n\n    bindDragging(elem: HTMLElement) {\n        //\n        // Remove binds on draggables if handle comes into play\n        //\n        if(elem == this._dragHandle) {\n          this._elem.onmousedown = undefined;\n          this._elem.ondragstart = undefined;\n          this._elem.ondragend = undefined;\n        }\n        //\n        // Drag events\n        //\n        elem.onmousedown = (event: MouseEvent) => {\n            this._target = event.target;\n        };\n        elem.ondragstart = (event: DragEvent) => {\n            if (this._dragHandle) {\n                if (!this._dragHandle.contains(<Element>this._target)) {\n                    event.preventDefault();\n                    return;\n                }\n            }\n\n            this._onDragStart(event);\n            //\n            if (event.dataTransfer != null) {\n                event.dataTransfer.setData('text', '');\n                // Change drag effect\n                event.dataTransfer.effectAllowed = this.effectAllowed || this._config.dragEffect.name;\n                // Change drag image\n                if (isPresent(this.dragImage)) {\n                    if (isString(this.dragImage)) {\n                        (<any>event.dataTransfer).setDragImage(createImage(<string>this.dragImage));\n                    } else if (isFunction(this.dragImage)) {\n                        (<any>event.dataTransfer).setDragImage(callFun(<Function>this.dragImage));\n                    } else {\n                        let img: DragImage = <DragImage>this.dragImage;\n                        (<any>event.dataTransfer).setDragImage(img.imageElement, img.x_offset, img.y_offset);\n                    }\n                } else if (isPresent(this._config.dragImage)) {\n                    let dragImage: DragImage = this._config.dragImage;\n                    (<any>event.dataTransfer).setDragImage(dragImage.imageElement, dragImage.x_offset, dragImage.y_offset);\n                } else if (this.cloneItem) {\n                    this._dragHelper = <HTMLElement>this._elem.cloneNode(true);\n                    this._dragHelper.classList.add('dnd-drag-item');\n                    this._dragHelper.style.position = \"absolute\";\n                    this._dragHelper.style.top = \"0px\";\n                    this._dragHelper.style.left = \"-1000px\";\n                    this._elem.parentElement.appendChild(this._dragHelper);\n                    (<any>event.dataTransfer).setDragImage(this._dragHelper, event.offsetX, event.offsetY);\n                }\n\n                // Change drag cursor\n                let cursorelem = (this._dragHandle) ? this._dragHandle : this._elem;\n\n                if (this._dragEnabled) {\n                    cursorelem.style.cursor = this.effectCursor ? this.effectCursor : this._config.dragCursor;\n                } else {\n                    cursorelem.style.cursor = this._defaultCursor;\n                }\n            }\n        };\n\n        elem.ondragend = (event: Event) => {\n            if (this._elem.parentElement && this._dragHelper) {\n                this._elem.parentElement.removeChild(this._dragHelper);\n            }\n            // console.log('ondragend', event.target);\n            this._onDragEnd(event);\n            // Restore style of dragged element\n            let cursorelem = (this._dragHandle) ? this._dragHandle : this._elem;\n            cursorelem.style.cursor = this._defaultCursor;\n        };\n    }\n\n    public setDragHandle(elem: HTMLElement) {\n        this._dragHandle = elem;\n        this.bindDragging(elem);\n        this.dragEnabled = this._dragEnabled;\n    }\n    /******* Change detection ******/\n\n    detectChanges () {\n        // Programmatically run change detection to fix issue in Safari\n        setTimeout(() => {\n            if ( this._cdr && !(this._cdr as ViewRef).destroyed ) {\n                this._cdr.detectChanges();\n            }\n        }, 250);\n    }\n\n    //****** Droppable *******//\n    private _onDragEnter(event: Event): void {\n        // console.log('ondragenter._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // event.preventDefault();\n            this._onDragEnterCallback(event);\n        }\n    }\n\n    private _onDragOver(event: Event) {\n        // // console.log('ondragover._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // The element is over the same source element - do nothing\n            if (event.preventDefault) {\n                // Necessary. Allows us to drop.\n                event.preventDefault();\n            }\n\n            this._onDragOverCallback(event);\n        }\n    }\n\n    private _onDragLeave(event: Event): void {\n        // console.log('ondragleave._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // event.preventDefault();\n            this._onDragLeaveCallback(event);\n        }\n    }\n\n    private _onDrop(event: Event): void {\n        // console.log('ondrop._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // Necessary. Allows us to drop.\n            this._preventAndStop(event);\n\n            this._onDropCallback(event);\n\n            this.detectChanges();\n        }\n    }\n\n    private _isDropAllowed(event: any): boolean {\n        if ((this._dragDropService.isDragged || (event.dataTransfer && event.dataTransfer.files)) && this.dropEnabled) {\n            // First, if `allowDrop` is set, call it to determine whether the\n            // dragged element can be dropped here.\n            if (this.allowDrop) {\n                return this.allowDrop(this._dragDropService.dragData);\n            }\n\n            // Otherwise, use dropZones if they are set.\n            if (this.dropZones.length === 0 && this._dragDropService.allowedDropZones.length === 0) {\n                return true;\n            }\n            for (let i: number = 0; i < this._dragDropService.allowedDropZones.length; i++) {\n                let dragZone: string = this._dragDropService.allowedDropZones[i];\n                if (this.dropZones.indexOf(dragZone) !== -1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private _preventAndStop(event: Event): any {\n        if (event.preventDefault) {\n            event.preventDefault();\n        }\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        }\n    }\n\n    //*********** Draggable **********//\n\n    private _onDragStart(event: Event): void {\n        //console.log('ondragstart.dragEnabled', this._dragEnabled);\n        if (this._dragEnabled) {\n            this._dragDropService.allowedDropZones = this.dropZones;\n            // console.log('ondragstart.allowedDropZones', this._dragDropService.allowedDropZones);\n            this._onDragStartCallback(event);\n        }\n    }\n\n    private _onDragEnd(event: Event): void {\n        this._dragDropService.allowedDropZones = [];\n        // console.log('ondragend.allowedDropZones', this._dragDropService.allowedDropZones);\n        this._onDragEndCallback(event);\n    }\n\n    //**** Drop Callbacks ****//\n    _onDragEnterCallback(event: Event) { }\n    _onDragOverCallback(event: Event) { }\n    _onDragLeaveCallback(event: Event) { }\n    _onDropCallback(event: Event) { }\n\n    //**** Drag Callbacks ****//\n    _onDragStartCallback(event: Event) { }\n    _onDragEndCallback(event: Event) { }\n}\n\nexport class AbstractHandleComponent {\n    _elem: HTMLElement;\n    constructor(elemRef: ElementRef, public _dragDropService: DragDropService, public _config: DragDropConfig,\n        private _Component: AbstractComponent, private _cdr: ChangeDetectorRef) {\n        this._elem = elemRef.nativeElement;\n        this._Component.setDragHandle(this._elem);\n    }\n}\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {ChangeDetectorRef} from '@angular/core';\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\n\nimport {AbstractComponent, AbstractHandleComponent} from './abstract.component';\nimport {DragDropConfig, DragImage} from './dnd.config';\nimport {DragDropService, DragDropData} from './dnd.service';\n\n@Directive({ selector: '[dnd-draggable]' })\nexport class DraggableComponent extends AbstractComponent {\n\n    @Input(\"dragEnabled\") set draggable(value:boolean) {\n        this.dragEnabled = !!value;\n    }\n\n    /**\n     * Callback function called when the drag actions happened.\n     */\n    @Output() onDragStart: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragEnd: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n\n    /**\n     * The data that has to be dragged. It can be any JS object\n     */\n    @Input() dragData: any;\n\n    /**\n     * Callback function called when the drag action ends with a valid drop action.\n     * It is activated after the on-drop-success callback\n     */\n    @Output(\"onDragSuccess\") onDragSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input(\"dropZones\") set dropzones(value:Array<string>) {\n        this.dropZones = value;\n    }\n\n    /**\n     * Drag allowed effect\n     */\n    @Input(\"effectAllowed\") set effectallowed(value: string) {\n        this.effectAllowed = value;\n    }\n\n    /**\n     * Drag effect cursor\n     */\n    @Input(\"effectCursor\") set effectcursor(value: string) {\n        this.effectCursor = value;\n    }\n\n    /**\n     * Here is the property dragImage you can use:\n     * - The string value as url to the image\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"/images/simpler.png\">\n     * ...\n     * - The DragImage value with Image and offset by x and y:\n     *   let myDragImage: DragImage = new DragImage(\"/images/simpler1.png\", 0, 0);\n     * ...\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"myDragImage\">\n     * ...\n     * - The custom function to return the value of dragImage programmatically:\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"getDragImage(someData)\">\n     * ...\n     *   getDragImage(value:any): string {\n     *     return value ? \"/images/simpler1.png\" : \"/images/simpler2.png\"\n     *   }\n     */\n    @Input() dragImage: string | DragImage | Function;\n\n    \n    @Input() cloneItem: boolean;\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, cdr);\n        this._defaultCursor = this._elem.style.cursor;\n        this.dragEnabled = true;\n    }\n\n    _onDragStartCallback(event: MouseEvent) {\n        this._dragDropService.isDragged = true;\n        this._dragDropService.dragData = this.dragData;\n        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;\n        this._elem.classList.add(this._config.onDragStartClass);\n        //\n        this.onDragStart.emit({dragData: this.dragData, mouseEvent: event});\n    }\n\n    _onDragEndCallback(event: MouseEvent) {\n        this._dragDropService.isDragged = false;\n        this._dragDropService.dragData = null;\n        this._dragDropService.onDragSuccessCallback = null;\n        this._elem.classList.remove(this._config.onDragStartClass);\n        //\n        this.onDragEnd.emit({dragData: this.dragData, mouseEvent: event});\n    }\n}\n\n\n@Directive({ selector: '[dnd-draggable-handle]' })\nexport class DraggableHandleComponent extends AbstractHandleComponent {\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig, _Component: DraggableComponent,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, _Component, cdr);\n    }\n}\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {ChangeDetectorRef} from '@angular/core';\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\n\nimport {AbstractComponent} from './abstract.component';\nimport {DragDropConfig} from './dnd.config';\nimport {DragDropService, DragDropData} from './dnd.service';\n\n@Directive({ selector: '[dnd-droppable]' })\nexport class DroppableComponent extends AbstractComponent {\n\n    @Input(\"dropEnabled\") set droppable(value:boolean) {\n        this.dropEnabled = !!value;\n    }\n\n    /**\n     * Callback function called when the drop action completes correctly.\n     * It is activated before the on-drag-success callback.\n     */\n    @Output() onDropSuccess: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragEnter: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragOver: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragLeave: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n\n    @Input(\"allowDrop\") set allowdrop(value: (dropData: any) => boolean) {\n        this.allowDrop = value;\n    }\n\n    @Input(\"dropZones\") set dropzones(value:Array<string>) {\n        this.dropZones = value;\n    }\n\n    /**\n     * Drag allowed effect\n     */\n    @Input(\"effectAllowed\") set effectallowed(value: string) {\n        this.effectAllowed = value;\n    }\n\n    /**\n     * Drag effect cursor\n     */\n    @Input(\"effectCursor\") set effectcursor(value: string) {\n        this.effectCursor = value;\n    }\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, cdr);\n\n        this.dropEnabled = true;\n    }\n\n    _onDragEnterCallback(event: MouseEvent) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.add(this._config.onDragEnterClass);\n            this.onDragEnter.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n        }\n    }\n\n    _onDragOverCallback (event: MouseEvent) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.add(this._config.onDragOverClass);\n            this.onDragOver.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n        }\n    };\n\n    _onDragLeaveCallback (event: MouseEvent) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.remove(this._config.onDragOverClass);\n            this._elem.classList.remove(this._config.onDragEnterClass);\n            this.onDragLeave.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n        }\n    };\n\n    _onDropCallback (event: MouseEvent) {\n        let dataTransfer = (event as any).dataTransfer;\n        if (this._dragDropService.isDragged || (dataTransfer && dataTransfer.files)) {\n            this.onDropSuccess.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n            if (this._dragDropService.onDragSuccessCallback) {\n                this._dragDropService.onDragSuccessCallback.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n            }\n            this._elem.classList.remove(this._config.onDragOverClass);\n            this._elem.classList.remove(this._config.onDragEnterClass);\n        }\n    }\n}\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {ChangeDetectorRef} from '@angular/core';\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\nimport {FormArray} from '@angular/forms';\n\nimport {AbstractComponent, AbstractHandleComponent} from './abstract.component';\nimport {DragDropConfig} from './dnd.config';\nimport {DragDropService, DragDropSortableService} from './dnd.service';\n\n@Directive({ selector: '[dnd-sortable-container]' })\nexport class SortableContainer extends AbstractComponent {\n\n    @Input(\"dragEnabled\") set draggable(value:boolean) {\n        this.dragEnabled = !!value;\n    }\n\n    private _sortableData: Array<any>|FormArray = [];\n    private sortableHandler: SortableFormArrayHandler|SortableArrayHandler;\n\n    @Input() set sortableData(sortableData: Array<any>|FormArray) {\n        this._sortableData = sortableData;\n        if (sortableData instanceof FormArray) {\n            this.sortableHandler = new SortableFormArrayHandler();\n        } else {\n            this.sortableHandler = new SortableArrayHandler();\n        }\n        //\n        this.dropEnabled = !!this._sortableData;\n        // console.log(\"collection is changed, drop enabled: \" + this.dropEnabled);\n    }\n    get sortableData(): Array<any>|FormArray {\n        return this._sortableData;\n    }\n\n    @Input(\"dropZones\") set dropzones(value:Array<string>) {\n        this.dropZones = value;\n    }\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig, cdr:ChangeDetectorRef,\n        private _sortableDataService: DragDropSortableService) {\n\n        super(elemRef, dragDropService, config, cdr);\n        this.dragEnabled = false;\n    }\n\n    _onDragEnterCallback(event: Event) {\n        if (this._sortableDataService.isDragged) {\n            let item:any = this._sortableDataService.sortableContainer.getItemAt(this._sortableDataService.index);\n            // Check does element exist in sortableData of this Container\n            if (this.indexOf(item) === -1) {\n                // Let's add it\n                // console.log('Container._onDragEnterCallback. drag node [' + this._sortableDataService.index.toString() + '] over parent node');\n                // Remove item from previouse list\n                this._sortableDataService.sortableContainer.removeItemAt(this._sortableDataService.index);\n                if (this._sortableDataService.sortableContainer._sortableData.length === 0) {\n                    this._sortableDataService.sortableContainer.dropEnabled = true;\n                }\n                // Add item to new list\n                this.insertItemAt(item, 0);\n                this._sortableDataService.sortableContainer = this;\n                this._sortableDataService.index = 0;\n            }\n            // Refresh changes in properties of container component\n            this.detectChanges();\n        }\n    }\n\n    getItemAt(index: number): any {\n        return this.sortableHandler.getItemAt(this._sortableData, index);\n    }\n\n    indexOf(item: any): number {\n        return this.sortableHandler.indexOf(this._sortableData, item);\n    }\n\n    removeItemAt(index: number): void {\n        this.sortableHandler.removeItemAt(this._sortableData, index);\n    }\n\n    insertItemAt(item: any, index: number) {\n        this.sortableHandler.insertItemAt(this._sortableData, item, index);\n    }\n}\n\nclass SortableArrayHandler {\n    getItemAt(sortableData: any, index: number): any {\n        return sortableData[index];\n    }\n\n    indexOf(sortableData: any, item: any): number {\n        return sortableData.indexOf(item);\n    }\n\n    removeItemAt(sortableData: any, index: number) {\n        sortableData.splice(index, 1);\n    }\n\n    insertItemAt(sortableData: any, item: any, index: number) {\n        sortableData.splice(index, 0, item);\n    }\n}\n\nclass SortableFormArrayHandler {\n    getItemAt(sortableData: any, index: number): any {\n        return sortableData.at(index);\n    }\n\n    indexOf(sortableData: any, item: any): number {\n        return sortableData.controls.indexOf(item);\n    }\n\n    removeItemAt(sortableData: any, index: number) {\n        sortableData.removeAt(index);\n    }\n\n    insertItemAt(sortableData: any, item: any, index: number) {\n        sortableData.insert(index, item);\n    }\n}\n\n@Directive({ selector: '[dnd-sortable]' })\nexport class SortableComponent extends AbstractComponent {\n\n    @Input('sortableIndex') index: number;\n\n    @Input(\"dragEnabled\") set draggable(value:boolean) {\n        this.dragEnabled = !!value;\n    }\n\n    @Input(\"dropEnabled\") set droppable(value:boolean) {\n        this.dropEnabled = !!value;\n    }\n\n    /**\n     * The data that has to be dragged. It can be any JS object\n     */\n    @Input() dragData: any;\n\n    /**\n     * Drag allowed effect\n     */\n    @Input(\"effectAllowed\") set effectallowed(value: string) {\n        this.effectAllowed = value;\n    }\n\n    /**\n     * Drag effect cursor\n     */\n    @Input(\"effectCursor\") set effectcursor(value: string) {\n        this.effectCursor = value;\n    }\n\n    /**\n     * Callback function called when the drag action ends with a valid drop action.\n     * It is activated after the on-drop-success callback\n     */\n    @Output(\"onDragSuccess\") onDragSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output(\"onDragStart\") onDragStartCallback: EventEmitter<any> = new EventEmitter<any>();\n    @Output(\"onDragOver\") onDragOverCallback: EventEmitter<any> = new EventEmitter<any>();\n    @Output(\"onDragEnd\") onDragEndCallback: EventEmitter<any> = new EventEmitter<any>();\n    @Output(\"onDropSuccess\") onDropSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig,\n        private _sortableContainer: SortableContainer,\n        private _sortableDataService: DragDropSortableService,\n        cdr:ChangeDetectorRef) {\n        super(elemRef, dragDropService, config, cdr);\n        this.dropZones = this._sortableContainer.dropZones;\n        this.dragEnabled = true;\n        this.dropEnabled = true;\n    }\n\n    _onDragStartCallback(event: Event) {\n        // console.log('_onDragStartCallback. dragging elem with index ' + this.index);\n        this._sortableDataService.isDragged = true;\n        this._sortableDataService.sortableContainer = this._sortableContainer;\n        this._sortableDataService.index = this.index;\n        this._sortableDataService.markSortable(this._elem);\n        // Add dragData\n        this._dragDropService.isDragged = true;\n        this._dragDropService.dragData = this.dragData;\n        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;\n        //\n        this.onDragStartCallback.emit(this._dragDropService.dragData);\n    }\n\n    _onDragOverCallback(event: Event) {\n        if (this._sortableDataService.isDragged && this._elem !== this._sortableDataService.elem) {\n            // console.log('_onDragOverCallback. dragging elem with index ' + this.index);\n            this._sortableDataService.sortableContainer = this._sortableContainer;\n            this._sortableDataService.index = this.index;\n            this._sortableDataService.markSortable(this._elem);\n            this.onDragOverCallback.emit(this._dragDropService.dragData);\n        }\n    }\n\n    _onDragEndCallback(event: Event) {\n        // console.log('_onDragEndCallback. end dragging elem with index ' + this.index);\n        this._sortableDataService.isDragged = false;\n        this._sortableDataService.sortableContainer = null;\n        this._sortableDataService.index = null;\n        this._sortableDataService.markSortable(null);\n        // Add dragGata\n        this._dragDropService.isDragged = false;\n        this._dragDropService.dragData = null;\n        this._dragDropService.onDragSuccessCallback = null;\n        //\n        this.onDragEndCallback.emit(this._dragDropService.dragData);\n    }\n\n    _onDragEnterCallback(event: Event) {\n        if (this._sortableDataService.isDragged) {\n            this._sortableDataService.markSortable(this._elem);\n            if ((this.index !== this._sortableDataService.index) ||\n                (this._sortableDataService.sortableContainer.sortableData !== this._sortableContainer.sortableData)) {\n                // console.log('Component._onDragEnterCallback. drag node [' + this.index + '] over node [' + this._sortableDataService.index + ']');\n                // Get item\n                let item:any = this._sortableDataService.sortableContainer.getItemAt(this._sortableDataService.index);\n                // Remove item from previouse list\n                this._sortableDataService.sortableContainer.removeItemAt(this._sortableDataService.index);\n                if (this._sortableDataService.sortableContainer.sortableData.length === 0) {\n                    this._sortableDataService.sortableContainer.dropEnabled = true;\n                }\n                // Add item to new list\n                this._sortableContainer.insertItemAt(item, this.index);\n                if (this._sortableContainer.dropEnabled) {\n                    this._sortableContainer.dropEnabled = false;\n                }\n                this._sortableDataService.sortableContainer = this._sortableContainer;\n                this._sortableDataService.index = this.index;\n                this.detectChanges();\n            }\n        }\n    }\n\n    _onDropCallback (event: Event) {\n        if (this._sortableDataService.isDragged) {\n            // console.log('onDropCallback.onDropSuccessCallback.dragData', this._dragDropService.dragData);\n            this.onDropSuccessCallback.emit(this._dragDropService.dragData);\n            if (this._dragDropService.onDragSuccessCallback) {\n                // console.log('onDropCallback.onDragSuccessCallback.dragData', this._dragDropService.dragData);\n                this._dragDropService.onDragSuccessCallback.emit(this._dragDropService.dragData);\n            }\n            // Refresh changes in properties of container component\n            this._sortableContainer.detectChanges();\n        }\n    }\n}\n\n@Directive({ selector: '[dnd-sortable-handle]' })\nexport class SortableHandleComponent extends AbstractHandleComponent {\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig, _Component: SortableComponent,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, _Component, cdr);\n    }\n}\n","// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\n\nimport {DragDropConfig} from './dnd.config';\nimport {DragDropService, DragDropSortableService, dragDropServiceFactory, dragDropSortableServiceFactory} from './dnd.service';\nimport {DraggableComponent, DraggableHandleComponent} from './draggable.component';\nimport {DroppableComponent} from './droppable.component';\nimport {SortableContainer, SortableComponent, SortableHandleComponent} from './sortable.component';\n\nexport * from './abstract.component';\nexport * from './dnd.config';\nexport * from './dnd.service';\nexport * from './draggable.component';\nexport * from './droppable.component';\nexport * from './sortable.component';\n\nexport let providers = [\n    DragDropConfig,\n    { provide: DragDropService, useFactory: dragDropServiceFactory },\n    { provide: DragDropSortableService, useFactory: dragDropSortableServiceFactory, deps: [DragDropConfig] }\n];\n\n@NgModule({\n  declarations: [DraggableComponent, DraggableHandleComponent, DroppableComponent, SortableContainer, SortableComponent, SortableHandleComponent],\n  exports : [DraggableComponent, DraggableHandleComponent, DroppableComponent, SortableContainer, SortableComponent, SortableHandleComponent],\n\n})\nexport class DndModule {\n  static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: DndModule,\n            providers: providers\n        };\n    }\n}\n"],"names":["isString","obj","isPresent","undefined","dragDropServiceFactory","DragDropService","dragDropSortableServiceFactory","config","DragDropSortableService","DataTransferEffect","name","this","COPY","LINK","MOVE","NONE","DragImage","imageElement","x_offset","y_offset","imgScr","HTMLImageElement","src","DragDropConfig","onDragStartClass","onDragEnterClass","onDragOverClass","onSortableDragClass","dragEffect","dropEffect","dragCursor","defaultCursor","DragDropData","exports","allowedDropZones","__decorate","Injectable","_config","Object","defineProperty","prototype","get","_elem","markSortable","elem","classList","remove","add","__metadata","AbstractComponent","elemRef","_dragDropService","_cdr","_this","_dragEnabled","dropEnabled","dropZones","cloneItem","_defaultCursor","nativeElement","style","cursor","ondragenter","event","_onDragEnter","ondragover","_onDragOver","dataTransfer","ondragleave","_onDragLeave","ondrop","_onDrop","bindDragging","set","enabled","cursorelem","_dragHandle","draggable","onmousedown","ondragstart","ondragend","_target","target","contains","_onDragStart","setData","effectAllowed","dragImage","setDragImage","img","createImage","isFunction","fun","callFun","_dragHelper","cloneNode","position","top","left","parentElement","appendChild","offsetX","offsetY","effectCursor","preventDefault","removeChild","_onDragEnd","setDragHandle","dragEnabled","detectChanges","setTimeout","destroyed","_isDropAllowed","_onDragEnterCallback","_onDragOverCallback","_onDragLeaveCallback","_preventAndStop","_onDropCallback","isDragged","files","allowDrop","dragData","length","i","dragZone","indexOf","stopPropagation","_onDragStartCallback","_onDragEndCallback","ElementRef","ChangeDetectorRef","AbstractHandleComponent","_Component","DraggableComponent","_super","dragDropService","cdr","call","onDragStart","EventEmitter","onDragEnd","onDragSuccessCallback","__extends","value","emit","mouseEvent","Input","Output","Array","Directive","selector","DraggableHandleComponent","DroppableComponent","onDropSuccess","onDragEnter","onDragOver","onDragLeave","SortableContainer","_sortableDataService","_sortableData","sortableData","FormArray","sortableHandler","SortableFormArrayHandler","SortableArrayHandler","item","sortableContainer","getItemAt","index","removeItemAt","insertItemAt","splice","at","controls","removeAt","insert","SortableComponent","_sortableContainer","onDragStartCallback","onDragOverCallback","onDragEndCallback","onDropSuccessCallback","SortableHandleComponent","providers","provide","useFactory","deps","DndModule","DndModule_1","forRoot","ngModule","NgModule","declarations"],"mappings":"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"}
